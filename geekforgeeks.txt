Table:
1. K difference permutation
2. Construct an array from XOR of all elements of array except element at same index 
3. Generators of finite cyclic group under addition
4. Maximum edge removal from tree to make even forest
5. Maximum sum of hour glass in matrix
6. Refactorable number
7. Number of decisions to reach destination
8. Count of strings that can be formed using a, b and c under given constraints


1. K difference permutation (http://www.geeksforgeeks.org/k-difference-permutation/)
Given two integers n and k. Consider first permutation of natural n numbers, P = “1 2 3 … n”, print a permutation “Result” such that abs(Resulti – Pi) = k where Pi denotes the position of i in permutation P. The value of Pi varies from 1 to n. If there are multiple possible results, then print the lexicographically smallest one.

Input: n = 6 k = 3
Output: 4 5 6 1 2 3
Explanation:
     P = 1 2 3 4 5 6
Result = 4 5 6 1 2 3

We can notice that the difference between
individual numbers (at same positions) of 
P and result is 3 and "4 5 6 1 2 3" is 
lexicographically smallest such permutation.
Other greater permutations could be 

Input  : n = 6 k = 2
Output : Not possible
Explanation: No permutation is possible 
with difference is k 

2. Construct an array from XOR of all elements of array except element at same index 
(http://www.geeksforgeeks.org/construct-an-array-from-xor-of-all-elements-of-array-except-element-at-same-index/)

Given an array A[] having n positive elements. 
The task to create another array B[] such as B[i] is XOR of all elements of array A[] except A[i].

Examples:

Input : A[] = {2, 1, 5, 9}
Output : B[] = {13, 14, 10, 6}

Input : A[] = {2, 1, 3, 6}
Output : B[] = {4, 7, 5, 0}

3. Generators of finite cyclic group under addition
Given a number n, find all generators of cyclic additive group under modulo n. 
Generator of a set {0, 1, … n-1} is an element x such that x is smaller than n, 
and using x (and addition operation), we can generate all elements of the set.

Examples:

Input : 10
Output : 1 3 7 9
The set to be generated is {0, 1, .. 9}
By adding 1, single or more times, we 
can create all elements from 0 to 9.
Similarly using 3, we can generate all
elements.
30 % 10 = 0, 21 % 10 = 1, 12 % 10 = 2, ...
Same is true for 7 and 9.

Input  : 24
Output : 1 5 7 11 13 17 19 23

4. Maximum edge removal from tree to make even forest
http://www.geeksforgeeks.org/maximum-edge-removal-tree-make-even-forest/

5. Maximum sum of hour glass in matrix
http://www.geeksforgeeks.org/maximum-sum-hour-glass-matrix/

6. Refactorable number
http://www.geeksforgeeks.org/refactorable-number/

7. Number of decisions to reach destination
http://www.geeksforgeeks.org/number-decisions-reach-destination/

8. Count of strings that can be formed using a, b and c under given constraints
http://www.geeksforgeeks.org/count-strings-can-formed-using-b-c-given-constraints/

Given a length n, 
count the number of strings of length n 
that can be made using ‘a’, ‘b’ and ‘c’ with at-most one ‘b’ and two ‘c’s allowed.

Examples:

Input : n = 3 
Output : 19 
Below strings follow given constraints:
aaa aab aac aba abc aca acb acc baa
bac bca bcc caa cab cac cba cbc cca ccb 

Input  : n = 4
Output : 43

9. Make n using 1s and 2s with minimum number of terms multiple of k
http://www.geeksforgeeks.org/make-n-using-1s-2s-minimum-number-terms-multiple-k/